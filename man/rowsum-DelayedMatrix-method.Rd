% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rowsum.R
\docType{methods}
\name{rowsum,DelayedMatrix-method}
\alias{rowsum,DelayedMatrix-method}
\title{Give Column and Row Sums of an \emph{DelayedMatrix} Based on a Grouping Variable}
\usage{
\S4method{rowsum}{DelayedMatrix}(x, group, reorder = TRUE,
  na.rm = FALSE, force_block_processing = FALSE, ...)
}
\arguments{
\item{x}{An \link[DelayedArray:DelayedMatrix-class]{DelayedArray::DelayedMatrix} object.}

\item{group}{A vector or factor giving the grouping, with one element per
row of \code{x} for \code{rowsum()} or one element per column of \code{x} for \code{colsum()}.
Missing values will be treated as another group and a warning will be given.}

\item{reorder}{If \code{TRUE}, then the result will be in order of
\code{sort(unique(group))}. If \code{FALSE}, it will be in the order that groups are
encountered.}

\item{na.rm}{logical (\code{TRUE} or \code{FALSE}). Should \code{NA} (including \code{NaN})
values be discarded?}

\item{force_block_processing}{\code{FALSE} (the default) means that a
seed-aware, optimised method is used (if available). This can be overridden
to use the general block-processing strategy by setting this to \code{TRUE}
(typically not advised). The block-processing strategy loads one or more
(depending on \code{\link[DelayedArray]{getDefaultBlockSize}()}) columns (\code{colFoo()})
or rows (\code{rowFoo()}) into memory as an ordinary \link[base:array]{base::array}.}

\item{...}{Additional arguments passed to specific methods.}
}
\description{
Compute column and row sums across rows or columns of a numeric
\link[DelayedArray:DelayedMatrix]{DelayedArray::DelayedMatrix} object for each level of a grouping variable
using block-processing.
}
\examples{
# A DelayedMatrix with a 'Matrix' seed
dm_Matrix <- DelayedArray(Matrix::Matrix(c(rep(1L, 5),
                                           as.integer((0:4) ^ 2),
                                           seq(-5L, -1L, 1L)),
                                         ncol = 3))

rowsum(dm_Matrix, group = c(1, 1, 1, 2, 2))
}
